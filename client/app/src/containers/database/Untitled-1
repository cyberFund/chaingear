import React from 'react';
import { Subscribe } from 'unstated';
import {
    FlexContainer, FlexContainerLeft, FlexContainerRight, AddNewRecordButton,
    DatabaseItemsContainer, TableEv as Table, DbMenuPoints, MenuPopup,
    MenuPopupItem, MenuPopupTransferIcon, MenuPopupEditIcon, MenuPopupDeleteIcon,
    MenuSeparator, MenuPopupAccountIcon, LinkHash, Section, Avatar, IconButton,
    Button,
} from '@cybercongress/ui';
import page from './page';

const Permission = {
    OnlyAdmin: 0,
    Whitelist: 1,
    AllUsers: 2,
};

const Records = () => (
    <Subscribe to={ [page] }>
        {(dbPage) => {
            const {
                fields, items, isOwner, isSchemaExist,
                isDbPaused, permissionGroup, userAccount,
            } = dbPage.state;

            const actionsThs = items.map(item => (
                <th key={ item.id }>
                    <DbMenuPoints>
                        <MenuPopup>
                            { userAccount === item.owner && [
                                <MenuPopupItem
                                  key='recordTranser'
                                  icon={ <MenuPopupAccountIcon /> }
                                  onClick={ () => dbPage.onRecordTransferOwnership(item) }
                                >
                                    Transfer Ownership
                                </MenuPopupItem>,
                                <MenuSeparator
                                  key='recordSeparator0'
                                />,
                            ]}
                            <MenuPopupItem
                              key='recordFund'
                              icon={ <MenuPopupTransferIcon /> }
                              onClick={ () => dbPage.onFundRecord(item) }
                            >
                                Fund
                            </MenuPopupItem>
                            { userAccount === item.owner && [
                                <MenuPopupItem
                                  key='recordClaimFund'
                                  icon={ <MenuPopupTransferIcon /> }
                                  onClick={ () => dbPage.onClaimRecordFunds(item) }
                                >
                                    Claim Funds
                                </MenuPopupItem>,
                                <MenuSeparator
                                  key='recordSeparator1'
                                />,
                                <MenuPopupItem
                                  key='recordEdit'
                                  icon={ <MenuPopupEditIcon /> }
                                  onClick={ () => dbPage.onRecordEdit(item) }
                                >
                                    Edit
                                </MenuPopupItem>,
                                <MenuPopupItem
                                  key='recordDelete'
                                  icon={ <MenuPopupDeleteIcon /> }
                                  onClick={ () => dbPage.onDeleteRecord(item) }
                                >
                                    Delete
                                </MenuPopupItem>,
                            ]}
                        </MenuPopup>
                    </DbMenuPoints>
                </th>
            ));

            const idsThs = items.map(item => (
                <th key={ item.id }>
                    {item.id}
                </th>
            ));

            const fundedThs = items.map(item => (
                <th key={ item.id }>
                    {item.currentEntryBalanceETH}
                </th>
            ));

            const ownersThs = items.map(item => (
                <th key={ item.id }>
                    <LinkHash value={ item.owner } noPadding noCopy />
                </th>
            ));

            const itemsTrs = fields.map((field) => {
                const itemsFields = items.map(item => (
                    <td key={ `${item.id}${field.name}` }>
                        {item[field.name].toString()}
                    </td>
                ));

                return (
                    <tr key={ field.name }>
                        <td>{field.name}</td>
                        {itemsFields}
                    </tr>
                );
            });

            const renderItem = items.map((item, index ) => {
                const {
                    hash, name, funded, developer, version,
                } = item;
            
                return (
                    <Table.Row isSelectable key={ name } borderBottom='none' width='fit-content' position='relative'>
                        <Table.TextCell width={48} flex='none'><span style={{color: '#fff'}}>{index + 1}</span></Table.TextCell>
                        <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>{name}</span></Table.TextCell>
                        {/* <Table.TextCell flex='none' width={150}>
                            <LinkHash style={{color: '#fff'}} value={hash} />
                        </Table.TextCell> */}
                        {/* <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>{developer}</span></Table.TextCell> */}
                        {/* <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>{version}</span></Table.TextCell> */}
                        <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>{funded} ETH</span></Table.TextCell>
                        {/* <Table.TextCell flex='none' width={150}>
                            <Avatar style={{ height: 25, width: 25 }} hash={hash} />
                        </Table.TextCell> */}
        
                        {/* <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>{funded} ETH</span></Table.TextCell> */}
                        
                        <Table.Cell position='sticky' right={0} backgroundColor='#000' flexBasis='auto' width={48} flex="none">
                            {/* <Popover
                                content={this.renderRowMenu}
                                position='top'
                            > */}
                                <IconButton icon="more" height={24} appearance="minimal" className='color-white-svg' />
                            {/* </Popover> */}
                        </Table.Cell>
                    </Table.Row>
                );
            });

            const showAddButton = (isOwner || permissionGroup === Permission.AllUsers)
                && !isDbPaused && isSchemaExist;

            return (
                <div>
                    {!isSchemaExist
                        && (
                            <div>
                                 {!showAddButton
                                            && (
                                                <Button
                                                  onClick={ dbPage.addRecord }
                                                >
                                                    Add new record
                                                </Button>
                                            )
                                        }
                                {/* <FlexContainer line>

                                    <FlexContainerLeft>
                                        RECORDS
                                    </FlexContainerLeft>

                                    <FlexContainerRight>
                                       
                                    </FlexContainerRight>

                                </FlexContainer> */}

                                <Section title='Records'>

                                <DatabaseItemsContainer disabled={ isDbPaused }>
                                    <Table>
                                        <Table.Body style={ { backgroundColor: '#000', overflowY: 'hidden'}}>
                                        <Table.Row borderBottom='1px solid #ffffff80' width='fit-content'>
                                        <Table.TextCell width={48} flex='none'><span style={{color: '#fff'}}>ID</span></Table.TextCell>
                                        <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>Name</span></Table.TextCell>
                                        <Table.TextCell flex='none' width={150}><span style={{color: '#fff'}}>Owner</span></Table.TextCell>
                                        <Table.TextCell position='sticky' right={0} backgroundColor='#000' width={48} flex="none"></Table.TextCell>

                                                {/* <th>Action</th>
                                                {actionsThs}

                                                <th>Id</th>
                                                {idsThs}

                                                <th>Funded</th>
                                                {fundedThs}

                                                <th>Owner</th>
                                                {ownersThs} */}
                                        </Table.Row>
                                        
                                            {renderItem}
                                        
                                            {/* {itemsTrs} */}
                                        </Table.Body>
                                    </Table>
                                </DatabaseItemsContainer>
                                </Section>
                            </div>
                        )
                    }
                </div>
            );
        }}
    </Subscribe>
);

export default Records;
